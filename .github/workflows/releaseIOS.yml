name: Push iOS Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release Version (use tags/vxx.xx.xx format)"
        required: true
        default: "latest"

env:
  WORKING_DIR: "${{ github.event.repository.name }}/app"
  ios_version_code: 1
  latest_release: true
  tag_version: ""

jobs:
  ios:
    name: Build and Release IPA
    runs-on: macos-latest

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Download Version artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: releaseIOS.yml
          name: ios-production-released-version
          path: ./
          search_artifacts: true
          workflow_conclusion: ""
          if_no_artifact_found: ignore

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "./iOSVersionCode.txt"

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: echo "ios_version_code=$(cat iOSVersionCode.txt | cut -d "-" -f2-)" >> $GITHUB_ENV

      - name: Set release details
        if: github.event.inputs.release_version != 'latest'
        run: |
          echo "latest_release=false" >> $GITHUB_ENV
          echo "tag_version=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV

      - name: Download code release
        uses: robinraju/release-downloader@v1.6
        with:
          latest: ${{ env.latest_release }}
          zipBall: true

      - name: Unzip Release Folder
        run: unzip -qq ${{ github.event.repository.name }}*.zip

      - name: Rename Directory
        run: mv ${{github.repository_owner}}-${{ github.event.repository.name }}* ${{ github.event.repository.name }}

      - name: Update Version Code value
        id: updated_ios_version
        uses: actions/github-script@v6
        with:
          script: |
            return parseInt("${{ env.ios_version_code }}") + 1

      - name: Update Plist version for iOS
        uses: damienaicheh/update-ios-version-info-plist-action@v1.0.0
        with:
          info-plist-path: "${{ env.WORKING_DIR }}/ios/App/App/Info.plist"
          bundle-version: "${{steps.updated_ios_version.outputs.result}}"
          bundle-short-version-string: "1.0.${{steps.updated_ios_version.outputs.result}}"
          print-file: true

      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #     AUTH_KEY_BASE64: ${{ secrets.AUTH_KEY_BASE64 }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     echo $CERTIFICATE_PATH
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     echo $PP_PATH
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     echo $KEYCHAIN_PATH
      #     AUTH_KEY_PATH=$RUNNER_TEMP/auth_key.p8
      #     echo $AUTH_KEY_PATH

      #     # import certificates and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
      #     echo -n "$AUTH_KEY_BASE64" | base64 --decode --output $AUTH_KEY_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      #     echo "KEY_PATH=$AUTH_KEY_PATH" >> $GITHUB_ENV

      - name: Install app dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm install

      - name: Build App
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build:prod

      - name: Build iOS
        working-directory: ${{ env.WORKING_DIR }}
        run: ionic capacitor build ios --minifycss --optimizejs --minifyjs --no-open --prod

      # - name: Build with xCode
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: xcodebuild -workspace ios/App/App.xcworkspace -scheme App clean archive -configuration Release -sdk iphoneos DEVELOPMENT_TEAM=${{secrets.APPLE_DEV_TEAM}} -archivePath ios/App/App.xcarchive -authenticationKeyIssuerID ${{secrets.AUTH_KEY_ISSUER_ID}} -authenticationKeyID ${{secrets.KEY_ID}} -authenticationKeyPath ${{ env.KEY_PATH }} -allowProvisioningUpdates

      # - name: Generate IPA file
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: |
      #     cd ios/App/App.xcarchive/Products/Applications
      #     mkdir Payload
      #     cp -R App.app Payload
      #     zip -qyr App.ipa ./Payload
      #     rm -rf Payload

      # - name: Upload release
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ios-release-Build-${{steps.updated_ios_version.outputs.result}}
      #     path: ${{ env.WORKING_DIR }}/ios/App/App.xcarchive/Products/Applications/App.ipa
      #     retention-days: 60

      - name: Deploy using Fastlane
        uses: maierj/fastlane-action@v2.3.0
        env:
          DEVELOPER_APP_IDENTIFIER: com.tekvizion.spotlight #App bundle ID
          DEVELOPER_APP_ID: 1660817666 #Get From AppConnect
          PROVISIONING_PROFILE_SPECIFIER: NewAppProvisioning #App Bundle ID
          TEMP_KEYCHAIN_USER: temp_keychain #Anything
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} #Anything
          APPLE_ISSUER_ID: ${{ secrets.AUTH_KEY_ISSUER_ID }} #API Key Issuer ID
          APPLE_KEY_ID: ${{ secrets.KEY_ID }} #API Key ID
          APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }} #P8 Certificate as text
          CERTIFICATE_STORE_URL: ${{ secrets.CERTIFICATE_STORE_URL }} #Repository URL
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }} #GIT USERNAME
          GIT_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} #GIT TOKEN
          GIT_CREDENTIALS: ${{ secrets.GIT_CREDENTIALS }} #GIT TOKEN
          FASTLANE_APPLE_ID: 1660817666 #apple id
          MATCH_USERNAME: ${{ secrets.FASTLANE_APPLE_ID }} #apple id
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} #any password
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }} #team ID
          DEVELOPER_PORTAL_TEAM_ID: ${{ secrets.DEVELOPER_PORTAL_TEAM_ID }} #team ID
        with:
          subdirectory: ${{ env.WORKING_DIR }}
          lane: ios release_appstore

      # - name: Upload release
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ios-release-Build-${{steps.updated_ios_version.outputs.result}}
      #     path: ${{ env.WORKING_DIR }}/ios/App/App.xcarchive/Products/Applications/App.ipa
      #     retention-days: 60

      # - name: Print deployed Release Version
      #   run: echo "Build-${{steps.updated_ios_version.outputs.result}}" > ./iOSVersionCode.txt

      # - name: Archive iOS Code Version
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ios-production-released-version
      #     path: ./iOSVersionCode.txt
